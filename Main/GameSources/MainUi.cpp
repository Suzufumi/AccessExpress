#include "stdafx.h"
#include "Project.h"

namespace basecross{
	//------------------------------------------------------------------------------------
	//メール数を表示するUI
	//------------------------------------------------------------------------------------
	MailNumUI::MailNumUI(const shared_ptr<Stage>& stagePtr)
		:Sprite(stagePtr, L"mail_TX", Vec2(128, 128))
	{}
	void MailNumUI::OnCreate() {
		Sprite::OnCreate();
		SetPosition(Vec2(86, 66));
		auto kakeru = GetStage()->AddGameObject<Sprite>(L"kakeru_TX", Vec2(50, 50));
		kakeru->SetPosition(Vec2(186, 66));
		m_mailNum = GetStage()->AddGameObject<NumberSprite>(2, 0);
		m_mailNum.lock()->GetComponent<Transform>()->SetPosition(300, 20, 0);
	}
	void MailNumUI::OnUpdate() {
		m_mailNum.lock()->ChangeNum(GameManager::GetInstance().GetMail());
	}
	//------------------------------------------------------------------------------------
	//コンストラクタ
	//------------------------------------------------------------------------------------
	ScoreUI::ScoreUI(const shared_ptr<Stage>& stagePtr)
		: GameObject(stagePtr)
	{
		m_displayScore = 0;
		m_places = 6;
	}
	//------------------------------------------------------------------------------------
	//スコアUI構築
	//------------------------------------------------------------------------------------
	void ScoreUI::OnCreate() {
		// 数字ごとの範囲を設定する
		for (int i = 0; i < 10; i++) {
			m_numRects.push_back({
				static_cast<float>(64 * i),			// left
				static_cast<float>(0),				// top
				static_cast<float>(64 * (i + 1)),	// right
				static_cast<float>(128)				// bottom
				});
		}
		
		float start_x = m_numRects[5].left / 640.0f;
		float end_x = m_numRects[5].right / 640.0f;
		float start_y = m_numRects[5].top / 128.0f;
		float end_y = m_numRects[5].bottom / 128.0f;

		for (int i = 0; i < m_places; i++) {
			m_vertices.push_back({
				{ Vec3(0.0f,128.0f,0.0f),Vec2(start_x,start_y) },
				{ Vec3(64.0f,128.0f,0.0f),Vec2(end_x,start_y) },
				{ Vec3(0.0f,0.0f,0.0f),Vec2(start_x,end_y) },
				{ Vec3(64.0f,0.0f,0.0f),Vec2(end_x,end_y) }
				});
		}

		for (int i = 0; i < m_places; i++) {
			auto number = ObjectFactory::Create<Sprite>(
				GetStage(), L"Number_TX", Vec2(640, 128), m_numRects[0]);
			auto transComp = number->GetComponent<Transform>();
			// GetThisでThisオブジェクトのshared_ptrを取ってこれる
			transComp->SetParent(GetThis<ScoreUI>());	// 基準点が画面の左上からScoreUIの場所になった
			number->SetPosition(Vec2(64 * (float)m_places - (64 + 64 * i), 135));
			transComp->SetScale(Vec3(1.2f, 0.7f, 0.9f));
			m_numbers.push_back(number);
		}
	}
	//------------------------------------------------------------------------------------
	//スコアUI更新
	//------------------------------------------------------------------------------------
	void ScoreUI::OnUpdate() {
		//カウントアップ処理
		CountUp();
		//表示スコアの設定
		ViewScore();
		//表示
		OnDraw();
	}
	//------------------------------------------------------------------------
	//スコアをカウントアップする
	//------------------------------------------------------------------------
	void ScoreUI::CountUp() {
		auto& gameManager = GameManager::GetInstance();
		//内部スコアの値まで表示スコアをカウントアップする
		if (gameManager.GetScore() != m_displayScore) {
			m_displayScore += 1;
			//表示スコアが内部スコアに追い付いていない際に加速する
			m_displayScore += ((gameManager.GetScore() - m_displayScore) / 50);
		}
	}
	//------------------------------------------------------------------------
	//画面に表示するスコアを設定する
	//------------------------------------------------------------------------
	void ScoreUI::ViewScore() {
		int score = m_displayScore;
		for (int i = 0; i < m_places; i++) {
			int num = score % 10;	// 一の位を抜き出す
			score /= 10;			// 一の位を切り捨てる

			float start_x = m_numRects[num].left / 640.0f;
			float end_x = m_numRects[num].right / 640.0f;
			float start_y = m_numRects[num].top / 128.0f;
			float end_y = m_numRects[num].bottom / 128.0f;

			m_vertices[i][0].textureCoordinate = Vec2(start_x, start_y);
			m_vertices[i][1].textureCoordinate = Vec2(end_x, start_y);
			m_vertices[i][2].textureCoordinate = Vec2(start_x, end_y);
			m_vertices[i][3].textureCoordinate = Vec2(end_x, end_y);

			auto drawComp = m_numbers[i]->GetComponent<PTSpriteDraw>();
			drawComp->UpdateVertices(m_vertices[i]);	// 位置は変えずにポリゴンの中身だけ変える
		}
	}
	//------------------------------------------------------------------------
	//設定させたスコアを表示する
	//------------------------------------------------------------------------
	void ScoreUI::OnDraw() {
		int score = m_displayScore;
		int places = 0;
		//何桁表示するかを算出する
		while (score > 0){
			score /= 10;
			places ++;
		}
		//各桁の表示の切替
		int count = 0;
		for (auto number : m_numbers) {
			if (count < places || count < 3) {
				number->OnDraw();

				number->SetDrawActive(true);
			}
			else {
				number->SetDrawActive(false);
			}
			count++;
		}
	}
}